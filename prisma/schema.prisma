// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  name         String
  password     String
  role         Role          @default(USER)
  profile      Profile?
  // company      Company[]     @relation(name: "company creation user")
  jobs         Job[]
  applications Application[]
  Company      Company?      @relation(fields: [companyId], references: [id])
  companyId    String?       @db.ObjectId
}

model Profile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  phone           String?
  bio             String?
  resume          String?
  profile_picture String?
  skills          String[]
}

enum Role {
  ADMIN
  RECRUITER
  USER
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  companyId   String   @unique
  logo        String?
  location    String
  createdAt   DateTime @default(now())
  // createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade, name: "company creation user")
  // createdById String   @db.ObjectId

  Recruiters User[]
  jobs       Job[]
}

model Job {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  location    String
  jobType     JobType
  tags        String[]
  requirement String
  salaryRange String
  isOpen      Boolean  @default(true)

  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String        @db.ObjectId
  createdBy    User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  applications Application[]
}

enum JobType {
  ONSITE
  REMOTE
  HYBRID
}

model Application {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  resume       String
  cover_letter String
  status       Status @default(PENDING)

  applicant   User   @relation(fields: [applicantId], references: [id])
  applicantId String @db.ObjectId
  job         Job    @relation(fields: [jobId], references: [id])
  jobId       String @db.ObjectId
}

enum Status {
  PENDING
  ACCEPTED
  REJCETED
}
